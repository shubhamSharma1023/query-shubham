{"ast":null,"code":"function processAllBlocks(level, rules, sideBar, totalCount, end, mainQuery) {\n  var setValueForSidebar = function setValueForSidebar(x, y) {\n    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var item = arguments.length > 3 ? arguments[3] : undefined;\n\n    if (item != undefined) {\n      if (sideBar[item.id] == undefined) {\n        sideBar[item.id] = {};\n      }\n\n      if (z != 0) {\n        sideBar[item.id]['z'] = z;\n      } else {\n        sideBar[item.id]['x'] = x;\n        sideBar[item.id]['y'] = y;\n        sideBar[item.id]['item'] = item;\n      }\n    }\n  };\n\n  var processAllBlock = function processAllBlock(blocks, localid) {\n    var localCount = 0;\n    blocks.map(function (item) {\n      if (item.type === \"condition\") {\n        totalCount = parseInt(totalCount) + 1;\n        localCount = localCount + 1;\n        rules.push({\n          item: item,\n          level: level\n        });\n      } else if (item.type === \"and\" || item.type === \"or\") {\n        setValueForSidebar(level, totalCount, 0, item);\n        localid.push(item);\n        level++;\n        processAllBlock(item.rules, localid);\n      }\n    });\n    var endId = localid.pop();\n    setValueForSidebar(0, 0, parseInt(totalCount), endId);\n    level--;\n  };\n\n  processAllBlock(mainQuery, []);\n  return {\n    sidebar: sideBar,\n    rules: rules\n  };\n}\n\nexport { processAllBlocks };","map":{"version":3,"sources":["/home/shubham/Documents/query-builder/src/components/QueryBuilderv2/helper.js"],"names":["processAllBlocks","level","rules","sideBar","totalCount","end","mainQuery","setValueForSidebar","x","y","z","item","undefined","id","processAllBlock","blocks","localid","localCount","map","type","parseInt","push","endId","pop","sidebar"],"mappings":"AACA,SAASA,gBAAT,CAA0BC,KAA1B,EAAiCC,KAAjC,EAAwCC,OAAxC,EAAiDC,UAAjD,EAA6DC,GAA7D,EAAkEC,SAAlE,EAA4E;AACxE,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,CAAD,EAAIC,CAAJ,EAAuB;AAAA,QAAhBC,CAAgB,uEAAZ,CAAY;AAAA,QAATC,IAAS;;AAC9C,QAAGA,IAAI,IAAEC,SAAT,EAAmB;AACf,UAAKT,OAAO,CAACQ,IAAI,CAACE,EAAN,CAAP,IAAoBD,SAAzB,EAAoC;AAChCT,QAAAA,OAAO,CAACQ,IAAI,CAACE,EAAN,CAAP,GAAmB,EAAnB;AACH;;AACD,UAAIH,CAAC,IAAI,CAAT,EAAY;AAETP,QAAAA,OAAO,CAACQ,IAAI,CAACE,EAAN,CAAP,CAAiB,GAAjB,IAAsBH,CAAtB;AAEF,OAJD,MAIO;AACHP,QAAAA,OAAO,CAACQ,IAAI,CAACE,EAAN,CAAP,CAAiB,GAAjB,IAAwBL,CAAxB;AACAL,QAAAA,OAAO,CAACQ,IAAI,CAACE,EAAN,CAAP,CAAiB,GAAjB,IAAwBJ,CAAxB;AACAN,QAAAA,OAAO,CAACQ,IAAI,CAACE,EAAN,CAAP,CAAiB,MAAjB,IAA2BF,IAA3B;AACH;AACJ;AACJ,GAfD;;AAgBA,MAAMG,eAAe,GAAG,SAAlBA,eAAkB,CAACC,MAAD,EAAQC,OAAR,EAAqB;AAC3C,QAAIC,UAAU,GAAG,CAAjB;AACAF,IAAAA,MAAM,CAACG,GAAP,CAAW,UAACP,IAAD,EAAU;AACf,UAAIA,IAAI,CAACQ,IAAL,KAAc,WAAlB,EAA+B;AAC3Bf,QAAAA,UAAU,GAAGgB,QAAQ,CAAChB,UAAD,CAAR,GAAuB,CAApC;AACAa,QAAAA,UAAU,GAAGA,UAAU,GAAG,CAA1B;AACAf,QAAAA,KAAK,CAACmB,IAAN,CAAW;AAACV,UAAAA,IAAI,EAACA,IAAN;AAAWV,UAAAA,KAAK,EAACA;AAAjB,SAAX;AACH,OAJD,MAIO,IAAIU,IAAI,CAACQ,IAAL,KAAc,KAAd,IAAuBR,IAAI,CAACQ,IAAL,KAAc,IAAzC,EAA+C;AAElDZ,QAAAA,kBAAkB,CAACN,KAAD,EAAQG,UAAR,EAAoB,CAApB,EAAuBO,IAAvB,CAAlB;AACAK,QAAAA,OAAO,CAACK,IAAR,CAAaV,IAAb;AACAV,QAAAA,KAAK;AACLa,QAAAA,eAAe,CAACH,IAAI,CAACT,KAAN,EAAYc,OAAZ,CAAf;AACH;AACJ,KAZH;AAaE,QAAIM,KAAK,GAACN,OAAO,CAACO,GAAR,EAAV;AACAhB,IAAAA,kBAAkB,CAAC,CAAD,EAAI,CAAJ,EAAOa,QAAQ,CAAChB,UAAD,CAAf,EAA6BkB,KAA7B,CAAlB;AACArB,IAAAA,KAAK;AACR,GAlBD;;AAmBDa,EAAAA,eAAe,CAACR,SAAD,EAAW,EAAX,CAAf;AACA,SAAO;AAACkB,IAAAA,OAAO,EAACrB,OAAT;AAAiBD,IAAAA,KAAK,EAACA;AAAvB,GAAP;AACF;;AACD,SAASF,gBAAT","sourcesContent":["\nfunction processAllBlocks(level, rules, sideBar, totalCount, end, mainQuery){\n    const setValueForSidebar = (x, y, z = 0, item) => {\n        if(item!=undefined){\n            if ( sideBar[item.id] == undefined) {\n                sideBar[item.id] = {};\n            }\n            if (z != 0) {\n          \n               sideBar[item.id]['z']=z;\n        \n            } else {\n                sideBar[item.id]['x'] = x;\n                sideBar[item.id]['y'] = y;\n                sideBar[item.id]['item'] = item;\n            }\n        }\n    }\n    const processAllBlock = (blocks,localid ) => {\n      let localCount = 0;\n      blocks.map((item) => {\n            if (item.type === \"condition\") {\n                totalCount = parseInt(totalCount) + 1;\n                localCount = localCount + 1;\n                rules.push({item:item,level:level});\n            } else if (item.type === \"and\" || item.type === \"or\") {\n               \n                setValueForSidebar(level, totalCount, 0, item);\n                localid.push(item);\n                level++;\n                processAllBlock(item.rules,localid);\n            }\n        });\n        let endId=localid.pop();\n        setValueForSidebar(0, 0, parseInt(totalCount), endId);\n        level--;\n    }\n   processAllBlock(mainQuery,[]);\n   return {sidebar:sideBar,rules:rules};\n}\nexport { processAllBlocks };"]},"metadata":{},"sourceType":"module"}